# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
from threading import Thread
import time
import os
import queue
from . import Main as main
from . import GNU_Radio, GPS, Barometro, Pantalla, Utilidades, Heatmap, Representacion
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"/usr/local/lib/python3.11/dist-packages/rssidev_gui/assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


class FullScreenApp:
    def __init__(self):
        self.window = Tk()
        self.window.geometry("1920x1080")
        self.window.configure(bg="#9CC795")
        self.setup_canvas()
        self.setup_images()
        self.setup_buttons()
        self.setup_texts()
        self.setup_entries()
        self.window.resizable(False, False)
        self.cola = queue.Queue()
        GPS.inicializar_gps()
        self.oled = Pantalla.inicializar_pantalla()
        self.barometro = Barometro.inicializar_barometro()
        self.window.mainloop()

    def setup_canvas(self):
        self.canvas = Canvas(
            self.window,
            bg="#9CC795",
            height=1080,
            width=1920,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )
        self.canvas.place(x=0, y=0)

    def setup_images(self):
        self.im1 = PhotoImage(file=relative_to_assets("logo.png"))
        self.canvas.create_image(205.0, 82.0, image=self.im1)

        self.im2 = PhotoImage(file=relative_to_assets("rect1.png"))
        self.canvas.create_image(335.0, 600.0, image=self.im2)

        self.im3 = PhotoImage(file=relative_to_assets("rect2.png"))
        self.canvas.create_image(1280.0, 600.0, image=self.im3)

        self.char = PhotoImage(file=relative_to_assets("char.png"))
        for y in range(270, 930, 70):
            self.canvas.create_image(335.0, y, image=self.char)

        self.res = PhotoImage(file=relative_to_assets("res.png"))
        self.canvas.create_image(1280.0, 340.0, image=self.res)
        self.canvas.create_image(1280.0, 490.0, image=self.res)
        self.canvas.create_image(1280.0, 642.0, image=self.res)
        self.canvas.create_image(1280.0, 790.0, image=self.res)

    def setup_buttons(self):
        self.button_image_1 = PhotoImage(file=relative_to_assets("button_1.png"))
        Button(
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.stop,
            relief="flat"
        ).place(x=1150.0, y=940.0, width=260.0, height=80.0)

        self.button_image_2 = PhotoImage(file=relative_to_assets("button_2.png"))
        Button(
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=self.test,
            relief="flat"
        ).place(x=350.0, y=940.0, width=260.0, height=80.0)

        self.button_image_3 = PhotoImage(file=relative_to_assets("button_3.png"))
        Button(
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=self.inicio,
            relief="flat"
        ).place(x=60.0, y=940.0, width=260.0, height=80.0)

    def setup_texts(self):
        self.canvas.create_text(
            209.0, 170.0, anchor="nw",
            text="Configuración:",
            fill="#000000",
            font=("Inter Bold", 40 * -1)
        )
        self.canvas.create_text(
            1210.0, 170.0, anchor="nw",
            text="Datos:",
            fill="#000000",
            font=("Inter Bold", 40 * -1)
        )
        config_labels = [
            ("Frecuencia (GHz)", 258.0), ("Ganancia receptor (dB)", 328.0), 
            ("Ganancia transmisor (dB)", 398.0), ("Latitud antena (º)", 468.0), 
            ("Longitud antena (º)", 538.0), ("Altura transmisor (m)", 608.0), 
            ("Altura receptor (m)", 678.0), ("Presión nivel del mar", 748.0), 
            ("Ganancia antena (dB)", 818.0), ("Nombre de la prueba", 888.0)
        ]
        for text, y in config_labels:
            self.canvas.create_text(80.0, y, anchor="nw", text=text, fill="#FFEAEC", font=("Inter Bold", 20 * -1))
        
        self.canvas.create_text(732.0, 320.0, anchor="nw", text="RSSI:", fill="#FFEAEC", font=("Inter Bold", 40 * -1))
        self.canvas.create_text(727.0, 470.0, anchor="nw", text="Lat:", fill="#FFEAEC", font=("Inter Bold", 40 * -1))
        self.canvas.create_text(727.0, 620.0, anchor="nw", text="Lon:", fill="#FFEAEC", font=("Inter Bold", 40 * -1))
        self.canvas.create_text(726.0, 770.0, anchor="nw", text="Alt:", fill="#FFEAEC", font=("Inter Bold", 40 * -1))

        self.rssi_text = self.canvas.create_text(1198.0, 320.0, anchor="nw", text="XX.XXX", tags="RSSI", fill="#FFEAEC", font=("Inter Bold", 40 * -1))
        self.latitude_text = self.canvas.create_text(1198.0, 470.0, anchor="nw", text="XX.XXX", tags="latitude", fill="#FFEAEC", font=("Inter Bold", 40 * -1))
        self.longitude_text = self.canvas.create_text(1191.0, 620.0, anchor="nw", text="-X.XXX", tags="longitude", fill="#FFEAEC", font=("Inter Bold", 40 * -1))
        self.altitude_text = self.canvas.create_text(1213.0, 770.0, anchor="nw", text="XXX.X", tags="altitude", fill="#FFEAEC", font=("Inter Bold", 40 * -1))

    def setup_entries(self):
        self.entry_image = PhotoImage(file=relative_to_assets("entry.png"))
        entries_positions = [
            (270.0, 255.0), (340.0, 325.0), (410.0, 395.0), (480.0, 465.0),
            (550.0, 535.0), (620.0, 605.0), (690.0, 675.0), (760.0, 745.0),
            (830.0, 815.0), (900.0, 885.0)
        ]
        self.entries = []
        for y, entry_y in entries_positions:
            self.canvas.create_image(465.0, y, image=self.entry_image)
            entry = Entry(self.window, bd=0, bg="#FFFFFF", fg="#000716", highlightthickness=0)
            entry.place(x=340.0, y=entry_y, width=250.0, height=30.0)
            self.entries.append(entry)

    def programa(self, top_block_cls=GNU_Radio.GNURadioBlock, lat_val=0, lon_val=0, p_val=1, f_val=0, g_val=20, n_val="medidas", options=None):
        self.status = True
        self.cal_off = main.obtener_calibracion(g_val, f_val)
        while True:
            tb = top_block_cls(f_val=f_val, g_val=g_val, n_val=n_val)
            try:
                
                tb.start()
                
                datos_gps = GPS.obtener_datos_gps()
                distancia = Utilidades.obtener_distancia_gps(lat_val, lon_val, datos_gps['latitude'], datos_gps['longitude'])
                presion = Barometro.obtener_datos_barometro(self.barometro)
                altura = Utilidades.calcula_altitud(presion, p_val)
                Pantalla.mostrar_datos_pantalla(self.oled, datos_gps)
                timestamp = time.strftime("%H%M%S")
                           
                tb.wait()
                
                level = Utilidades.obtener_medidas(n_val)
                real_level = float(level) + self.cal_off

                tb.stop()
                
                medidas = [f" {level}", f" {datos_gps['latitude']}", f" {datos_gps['longitude']}", f" {presion}", f" {distancia}", f"{altura}", f"{datos_gps['altitude']}" ,f"{timestamp}", f"{real_level}"]
                print(medidas)
                
                with open(self.ruta + "/" + "medidas.txt", 'a') as txt_file:
                    txt_file.write(" ".join(medidas))
                    txt_file.write('\n')
                
                self.cola.put(self.set_altitude(altura))
                self.cola.put(self.set_longitude(datos_gps["longitude"]))
                self.cola.put(self.set_latitude(datos_gps["latitude"]))
                self.cola.put(self.set_RSSI(real_level))

                time.sleep(0.25)
                
                if self.status == False:
                    raise Exception("Measurement stopped")

            except Exception as e:
                print(e)
                Utilidades.procesar_archivo(self.ruta, n_val)
                datos = self.ruta + "/medidas.txt"
                procesado = self.ruta + "/procesado.txt"
                config = self.ruta + "/config.txt"
                Heatmap.main(datos, self.ruta)
                Representacion.representa_medidas(procesado, config, self.ruta)
                os.remove(n_val)
                break
                
            finally:
                tb.stop()
                tb.wait()
                os.remove(n_val)

    def inicio(self):
        self.freq = float(self.entries[0].get())  # Frecuencia en GHz
        self.g_rx = int(self.entries[1].get())
        self.g_tx = int(self.entries[2].get())
        self.lat = float(self.entries[3].get())
        self.lon = float(self.entries[4].get())
        self.h_tx = float(self.entries[5].get())
        self.h_rx = float(self.entries[6].get())
        self.pres = float(self.entries[7].get())
        self.g_ant = float(self.entries[8].get())
        self.name = self.entries[9].get()
        self.freq_Hz=self.freq*1e9
        self.freq_MHz=self.freq*1e3
        self.ruta = main.create_info_file(freq_MHz=self.freq_MHz, g_tx=self.g_tx, g_ant=self.g_ant, h_tx=self.h_tx, g_rx=self.g_rx ,h_rx=self.h_rx, n_val=self.name)
        self.programa_thread=Thread(target = self.programa, kwargs={'lat_val':self.lat, 'lon_val':self.lon, 'p_val':self.pres, 'f_val':self.freq_Hz, 'g_val':self.g_rx, 'n_val':self.name})
        self.programa_thread.start()

    def test(self):
        try:
            RSSI = main.nivel_de_senal()
            self.set_RSSI(str(RSSI))

        except Exception as e:
            print(e)
            self.set_RSSI("ERR")
        try:
            datos_test = GPS.obtener_datos_gps()
            self.set_longitude(str(datos_test['longitude']))
            self.set_latitude(str(datos_test['latitude']))
            alt = str(datos_test['altitude'])
            alt = alt.replace("(","")
            alt = alt.replace(")","")
            alt = alt.replace(",","")
            self.set_altitude(alt)
        except Exception as e:
            print(e)
            self.set_longitude(000)
            self.set_latitude(000)
            self.set_altitude(000)

    def stop(self):
        self.status = False
    
    def set_RSSI(self, RSSI):
        RSSI = round(float(RSSI), 4)
        RSSI = str(RSSI) + " dBm"
        item_id = self.canvas.find_withtag("RSSI")
        self.canvas.itemconfig(item_id, text=RSSI) 

    def set_longitude(self, longitude):
        longitude = round(float(longitude), 4)
        longitude = str(longitude) + " º"
        item_id = self.canvas.find_withtag("longitude")
        self.canvas.itemconfig(item_id, text=longitude) 

    def set_latitude(self, latitude):
        latitude = round(float(latitude), 4)
        latitude = str(latitude) + " º"
        item_id = self.canvas.find_withtag("latitude")
        self.canvas.itemconfig(item_id, text=latitude) 

    def set_altitude(self, altitude):
        altitude = round(float(altitude), 4)
        altitude = str(altitude) + " m"
        item_id = self.canvas.find_withtag("altitude")
        self.canvas.itemconfig(item_id, text=altitude) 

if __name__ == '__main__':
    m=FullScreenApp()

def start():
    m=FullScreenApp()